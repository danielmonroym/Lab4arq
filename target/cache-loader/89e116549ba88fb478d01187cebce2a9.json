{"remainingRequest":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\tslint-loader\\index.js!C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\src\\main\\webapp\\app\\modules\\administration\\metrics\\metrics.tsx","dependencies":[{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\src\\main\\webapp\\app\\modules\\administration\\metrics\\metrics.tsx","mtime":1585594142769},{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1585592814268},{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Progress, Col, Row, Button } from 'reactstrap';\r\nimport { Translate, TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_WHOLE_NUMBER_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT } from 'app/config/constants';\r\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\r\nimport MetricsModal from './metrics-modal';\r\nvar MetricsPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MetricsPage, _super);\r\n    function MetricsPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            showModal: false\r\n        };\r\n        _this.getMetrics = function () {\r\n            if (!_this.props.isFetching) {\r\n                _this.props.systemMetrics();\r\n            }\r\n        };\r\n        _this.getThreadDump = function () {\r\n            _this.props.systemThreadDump();\r\n            _this.setState({\r\n                showModal: true\r\n            });\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.setState({\r\n                showModal: false\r\n            });\r\n        };\r\n        _this.filterNaN = function (input) { return (isNaN(input) ? 0 : input); };\r\n        _this.getStats = function (metrics) {\r\n            var stat = {\r\n                servicesStats: {},\r\n                cachesStats: {}\r\n            };\r\n            if (!_this.props.isFetching && metrics && metrics.application) {\r\n                Object.keys(metrics.application).forEach(function (key, indexNm) {\r\n                    if (key.indexOf('controller') !== -1) {\r\n                        stat.servicesStats[key] = metrics.application[key];\r\n                    }\r\n                    else if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\r\n                        // remove gets or puts\r\n                        var index = key.lastIndexOf('.');\r\n                        var newKey = key.substr(0, index);\r\n                        // Keep the name of the domain\r\n                        stat.cachesStats[newKey] = {\r\n                            name: newKey,\r\n                            value: metrics.application[key]\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n            return stat;\r\n        };\r\n        _this.gaugeRow = function (metrics, label, key) {\r\n            return metrics.base[key] ? (React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"9\" }, label),\r\n                React.createElement(Col, { md: \"3\", className: \"text-right\" }, metrics.base[key]))) : null;\r\n        };\r\n        _this.renderModal = function () { return React.createElement(MetricsModal, { handleClose: _this.handleClose, showModal: _this.state.showModal, threadDump: _this.props.threadDump }); };\r\n        _this.renderBase = function (metrics) { return (React.createElement(Row, null,\r\n            React.createElement(Col, { sm: \"12\" },\r\n                React.createElement(\"h3\", null, \"JVM Metrics\"),\r\n                React.createElement(Row, null,\r\n                    React.createElement(Col, { md: \"4\" },\r\n                        React.createElement(\"b\", null, \"Memory\"),\r\n                        React.createElement(\"p\", null,\r\n                            React.createElement(\"span\", null, \"Heap Memory\"),\r\n                            \" (\",\r\n                            React.createElement(TextFormat, { value: metrics.base['memory.usedHeap'] / 1048576, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                            \"M /\",\r\n                            ' ',\r\n                            React.createElement(TextFormat, { value: metrics.base['memory.maxHeap'] / 1048576, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                            \"M)\"),\r\n                        React.createElement(Progress, { animated: true, min: \"0\", max: metrics.base['memory.maxHeap'], value: metrics.base['memory.usedHeap'], color: \"success\" },\r\n                            React.createElement(\"span\", null,\r\n                                React.createElement(TextFormat, { value: (metrics.base['memory.usedHeap'] * 100) / metrics.base['memory.maxHeap'], type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                                \"%\")),\r\n                        React.createElement(\"p\", null,\r\n                            React.createElement(\"span\", null, \"Non-Heap Memory\"),\r\n                            \" (\",\r\n                            React.createElement(TextFormat, { value: metrics.base['memory.usedNonHeap'] / 1048576, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                            \"M /\",\r\n                            ' ',\r\n                            React.createElement(TextFormat, { value: metrics.base['memory.committedNonHeap'] / 1048576, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                            \"M)\"),\r\n                        React.createElement(Progress, { animated: true, min: \"0\", max: metrics.base['memory.committedNonHeap'], value: metrics.base['memory.usedNonHeap'], color: \"success\" },\r\n                            React.createElement(\"span\", null,\r\n                                React.createElement(TextFormat, { value: (metrics.base['memory.usedNonHeap'] * 100) / metrics.base['memory.committedNonHeap'], type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                                \"%\"))),\r\n                    React.createElement(Col, { md: \"4\" },\r\n                        React.createElement(\"b\", null, \"Threads\"),\r\n                        \" (Total: \",\r\n                        metrics.base['thread.count'],\r\n                        \" / \",\r\n                        metrics.base['thread.max.count'],\r\n                        \")\",\r\n                        React.createElement(\"p\", null,\r\n                            React.createElement(\"span\", null, \"Live\"),\r\n                            \" \",\r\n                            metrics.base['thread.count']),\r\n                        React.createElement(Progress, { animated: true, min: \"0\", value: metrics.base['thread.count'], max: metrics.base['thread.max.count'], color: \"success\" },\r\n                            React.createElement(\"span\", null,\r\n                                React.createElement(TextFormat, { value: (metrics.base['thread.count'] * 100) / metrics.base['thread.max.count'], type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }),\r\n                                \"%\"))),\r\n                    React.createElement(Col, { md: \"4\" },\r\n                        React.createElement(\"b\", null, \"Garbage collections\"),\r\n                        _this.gaugeRow(metrics, 'Mark Sweep count', 'gc.MarkSweepCompact.count'),\r\n                        _this.gaugeRow(metrics, 'Mark Sweep time', 'gc.MarkSweepCompact.time'),\r\n                        _this.gaugeRow(metrics, 'Scavenge count', 'gc.Copy.count'),\r\n                        _this.gaugeRow(metrics, 'Scavenge time', 'gc.Copy.time'),\r\n                        _this.gaugeRow(metrics, 'Mark Sweep count', 'gc.PS MarkSweep.count'),\r\n                        _this.gaugeRow(metrics, 'Mark Sweep time', 'gc.PS MarkSweep.time'),\r\n                        _this.gaugeRow(metrics, 'Scavenge count', 'gc.PS Scavenge.count'),\r\n                        _this.gaugeRow(metrics, 'Scavenge time', 'gc.PS Scavenge.time')))))); };\r\n        return _this;\r\n    }\r\n    MetricsPage.prototype.componentDidMount = function () {\r\n        this.props.systemMetrics();\r\n    };\r\n    MetricsPage.prototype.render = function () {\r\n        var _a = this.props, metrics = _a.metrics, isFetching = _a.isFetching;\r\n        var data = metrics || {};\r\n        var _b = this.getStats(data), servicesStats = _b.servicesStats, cachesStats = _b.cachesStats;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { className: \"metrics-page-heading\" }, \"Application Metrics\"),\r\n            React.createElement(\"p\", null,\r\n                React.createElement(Button, { onClick: this.getMetrics, color: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"sync\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { component: \"span\", contentKey: \"health.refresh.button\" }, \"Refresh\"))),\r\n            React.createElement(\"hr\", null),\r\n            metrics.base ? this.renderBase(metrics) : '',\r\n            metrics.application ? (React.createElement(Row, null,\r\n                React.createElement(Col, { sm: \"12\" },\r\n                    React.createElement(\"h3\", null, \"HTTP requests (events per second)\"),\r\n                    React.createElement(\"p\", null,\r\n                        React.createElement(\"span\", null, \"Active requests:\"),\r\n                        ' ',\r\n                        React.createElement(\"b\", null,\r\n                            React.createElement(TextFormat, { value: metrics.application['InstrumentedFilter.activeRequests'].count, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        ' ',\r\n                        \"- \",\r\n                        React.createElement(\"span\", null, \"Total requests:\"),\r\n                        ' ',\r\n                        React.createElement(\"b\", null,\r\n                            React.createElement(TextFormat, { value: metrics.application['InstrumentedFilter.requests'].count, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT }))),\r\n                    React.createElement(Table, null,\r\n                        React.createElement(\"thead\", null,\r\n                            React.createElement(\"tr\", null,\r\n                                React.createElement(\"th\", null, \"Code\"),\r\n                                React.createElement(\"th\", null, \"Count\"),\r\n                                React.createElement(\"th\", { className: \"text-right\" }, \"Mean\"),\r\n                                React.createElement(\"th\", { className: \"text-right\" },\r\n                                    React.createElement(\"span\", null, \"Average\"),\r\n                                    \" (1 min)\"),\r\n                                React.createElement(\"th\", { className: \"text-right\" },\r\n                                    React.createElement(\"span\", null, \"Average\"),\r\n                                    \" (5 min)\"),\r\n                                React.createElement(\"th\", { className: \"text-right\" },\r\n                                    React.createElement(\"span\", null, \"Average\"),\r\n                                    \" (15 min)\"))),\r\n                        React.createElement(\"tbody\", null,\r\n                            React.createElement(\"tr\", { key: 0 },\r\n                                React.createElement(\"td\", null, \"OK\"),\r\n                                React.createElement(\"td\", null,\r\n                                    React.createElement(Progress, { min: \"0\", max: metrics.application['InstrumentedFilter.requests'].count, value: metrics.application['InstrumentedFilter.responseCodes.ok'].count, color: \"success\", animated: true })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].meanRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].oneMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fiveMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fifteenMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT }))),\r\n                            React.createElement(\"tr\", { key: 1 },\r\n                                React.createElement(\"td\", null, \"Not Found\"),\r\n                                React.createElement(\"td\", null,\r\n                                    React.createElement(Progress, { min: \"0\", max: metrics.application['InstrumentedFilter.requests'].count, value: metrics.application['InstrumentedFilter.responseCodes.notFound'].count, color: \"success\", animated: true })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].meanRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].oneMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fiveMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fifteenMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT }))),\r\n                            React.createElement(\"tr\", { key: 2 },\r\n                                React.createElement(\"td\", null, \"Server Error\"),\r\n                                React.createElement(\"td\", null,\r\n                                    React.createElement(Progress, { min: \"0\", max: metrics.application['InstrumentedFilter.requests'].count, value: metrics.application['InstrumentedFilter.responseCodes.serverError'].count, color: \"success\", animated: true })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].meanRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].oneMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fiveMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })),\r\n                                React.createElement(\"td\", { className: \"text-right\" },\r\n                                    React.createElement(TextFormat, { value: this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fifteenMinRate), type: \"number\", format: APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT })))))))) : (''),\r\n            servicesStats ? (React.createElement(Row, null,\r\n                React.createElement(Col, { sm: \"12\" },\r\n                    React.createElement(\"h3\", null, \"Services statistics (time in millisecond)\")),\r\n                React.createElement(Table, null,\r\n                    React.createElement(\"thead\", null,\r\n                        React.createElement(\"tr\", null,\r\n                            React.createElement(\"th\", null, \"Service name\"),\r\n                            React.createElement(\"th\", null, \"Count\"),\r\n                            React.createElement(\"th\", null, \"Mean\"),\r\n                            React.createElement(\"th\", null, \"Min\"),\r\n                            React.createElement(\"th\", null, \"p50\"),\r\n                            React.createElement(\"th\", null, \"p75\"),\r\n                            React.createElement(\"th\", null, \"p95\"),\r\n                            React.createElement(\"th\", null, \"p99\"),\r\n                            React.createElement(\"th\", null, \"Max\"))),\r\n                    React.createElement(\"tbody\", null, Object.keys(servicesStats).map(function (key, index) { return (React.createElement(\"tr\", { key: key },\r\n                        React.createElement(\"td\", null, key),\r\n                        React.createElement(\"td\", null, servicesStats[key].count),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].mean, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].min, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].p50, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].p75, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].p95, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].p99, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })),\r\n                        React.createElement(\"td\", null,\r\n                            React.createElement(TextFormat, { value: servicesStats[key].max, type: \"number\", format: APP_WHOLE_NUMBER_FORMAT })))); }))))) : (''),\r\n            this.renderModal()));\r\n    };\r\n    return MetricsPage;\r\n}(React.Component));\r\nexport { MetricsPage };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    metrics: storeState.administration.metrics,\r\n    isFetching: storeState.administration.loading,\r\n    threadDump: storeState.administration.threadDump\r\n}); };\r\nvar mapDispatchToProps = { systemMetrics: systemMetrics, systemThreadDump: systemThreadDump };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetricsPage);\r\n",{"version":3,"file":"C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\src\\main\\webapp\\app\\modules\\administration\\metrics\\metrics.tsx","sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\node_modules\\tslint-loader\\index.js!C:\\Users\\Usuario\\Documents\\NetBeansProjects\\Concesionario4\\src\\main\\webapp\\app\\modules\\administration\\metrics\\metrics.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Progress, Col, Row, Button } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_WHOLE_NUMBER_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT } from 'app/config/constants';\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\nimport MetricsModal from './metrics-modal';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\n\nexport interface IMetricsPageState {\n  showModal: boolean;\n}\n\nexport class MetricsPage extends React.Component<IMetricsPageProps, IMetricsPageState> {\n  state: IMetricsPageState = {\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemMetrics();\n  }\n\n  getMetrics = () => {\n    if (!this.props.isFetching) {\n      this.props.systemMetrics();\n    }\n  };\n\n  getThreadDump = () => {\n    this.props.systemThreadDump();\n    this.setState({\n      showModal: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  filterNaN = input => (isNaN(input) ? 0 : input);\n\n  getStats = metrics => {\n    const stat = {\n      servicesStats: {},\n      cachesStats: {}\n    };\n    if (!this.props.isFetching && metrics && metrics.application) {\n      Object.keys(metrics.application).forEach((key, indexNm) => {\n        if (key.indexOf('controller') !== -1) {\n          stat.servicesStats[key] = metrics.application[key];\n        } else if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n          // remove gets or puts\n          const index = key.lastIndexOf('.');\n          const newKey = key.substr(0, index);\n          // Keep the name of the domain\n          stat.cachesStats[newKey] = {\n            name: newKey,\n            value: metrics.application[key]\n          };\n        }\n      });\n    }\n    return stat;\n  };\n\n  gaugeRow = (metrics, label: String, key) =>\n    metrics.base[key] ? (\n      <Row>\n        <Col md=\"9\">{label}</Col>\n        <Col md=\"3\" className=\"text-right\">\n          {metrics.base[key]}\n        </Col>\n      </Row>\n    ) : null;\n\n  renderModal = () => <MetricsModal handleClose={this.handleClose} showModal={this.state.showModal} threadDump={this.props.threadDump} />;\n\n  renderBase = metrics => (\n    <Row>\n      <Col sm=\"12\">\n        <h3>JVM Metrics</h3>\n        <Row>\n          <Col md=\"4\">\n            <b>Memory</b>\n\n            <p>\n              <span>Heap Memory</span> (\n              <TextFormat value={metrics.base['memory.usedHeap'] / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />M /{' '}\n              <TextFormat value={metrics.base['memory.maxHeap'] / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n              M)\n            </p>\n            <Progress animated min=\"0\" max={metrics.base['memory.maxHeap']} value={metrics.base['memory.usedHeap']} color=\"success\">\n              <span>\n                <TextFormat\n                  value={(metrics.base['memory.usedHeap'] * 100) / metrics.base['memory.maxHeap']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n\n            <p>\n              <span>Non-Heap Memory</span> (\n              <TextFormat value={metrics.base['memory.usedNonHeap'] / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />M /{' '}\n              <TextFormat value={metrics.base['memory.committedNonHeap'] / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n              M)\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              max={metrics.base['memory.committedNonHeap']}\n              value={metrics.base['memory.usedNonHeap']}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={(metrics.base['memory.usedNonHeap'] * 100) / metrics.base['memory.committedNonHeap']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Threads</b> (Total: {metrics.base['thread.count']} / {metrics.base['thread.max.count']})\n            <p>\n              <span>Live</span> {metrics.base['thread.count']}\n            </p>\n            <Progress animated min=\"0\" value={metrics.base['thread.count']} max={metrics.base['thread.max.count']} color=\"success\">\n              <span>\n                <TextFormat\n                  value={(metrics.base['thread.count'] * 100) / metrics.base['thread.max.count']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Garbage collections</b>\n\n            {this.gaugeRow(metrics, 'Mark Sweep count', 'gc.MarkSweepCompact.count')}\n            {this.gaugeRow(metrics, 'Mark Sweep time', 'gc.MarkSweepCompact.time')}\n            {this.gaugeRow(metrics, 'Scavenge count', 'gc.Copy.count')}\n            {this.gaugeRow(metrics, 'Scavenge time', 'gc.Copy.time')}\n\n            {this.gaugeRow(metrics, 'Mark Sweep count', 'gc.PS MarkSweep.count')}\n            {this.gaugeRow(metrics, 'Mark Sweep time', 'gc.PS MarkSweep.time')}\n            {this.gaugeRow(metrics, 'Scavenge count', 'gc.PS Scavenge.count')}\n            {this.gaugeRow(metrics, 'Scavenge time', 'gc.PS Scavenge.time')}\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n\n  render() {\n    const { metrics, isFetching } = this.props;\n    const data = metrics || {};\n    const { servicesStats, cachesStats } = this.getStats(data);\n    return (\n      <div>\n        <h2 className=\"metrics-page-heading\">Application Metrics</h2>\n        <p>\n          <Button onClick={this.getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n            <FontAwesomeIcon icon=\"sync\" />\n            &nbsp;\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\n              Refresh\n            </Translate>\n          </Button>\n        </p>\n        <hr />\n        {metrics.base ? this.renderBase(metrics) : ''}\n\n        {metrics.application ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>HTTP requests (events per second)</h3>\n              <p>\n                <span>Active requests:</span>{' '}\n                <b>\n                  <TextFormat\n                    value={metrics.application['InstrumentedFilter.activeRequests'].count}\n                    type=\"number\"\n                    format={APP_WHOLE_NUMBER_FORMAT}\n                  />\n                </b>{' '}\n                - <span>Total requests:</span>{' '}\n                <b>\n                  <TextFormat\n                    value={metrics.application['InstrumentedFilter.requests'].count}\n                    type=\"number\"\n                    format={APP_WHOLE_NUMBER_FORMAT}\n                  />\n                </b>\n              </p>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Code</th>\n                    <th>Count</th>\n                    <th className=\"text-right\">Mean</th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (1 min)\n                    </th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (5 min)\n                    </th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (15 min)\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr key={0}>\n                    <td>OK</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={metrics.application['InstrumentedFilter.requests'].count}\n                        value={metrics.application['InstrumentedFilter.responseCodes.ok'].count}\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].meanRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].oneMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fiveMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fifteenMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                  <tr key={1}>\n                    <td>Not Found</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={metrics.application['InstrumentedFilter.requests'].count}\n                        value={metrics.application['InstrumentedFilter.responseCodes.notFound'].count}\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].meanRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].oneMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fiveMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fifteenMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                  <tr key={2}>\n                    <td>Server Error</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={metrics.application['InstrumentedFilter.requests'].count}\n                        value={metrics.application['InstrumentedFilter.responseCodes.serverError'].count}\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].meanRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].oneMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fiveMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fifteenMinRate)}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        ) : (\n          ''\n        )}\n        {servicesStats ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>Services statistics (time in millisecond)</h3>\n            </Col>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Service name</th>\n                  <th>Count</th>\n                  <th>Mean</th>\n                  <th>Min</th>\n                  <th>p50</th>\n                  <th>p75</th>\n                  <th>p95</th>\n                  <th>p99</th>\n                  <th>Max</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(servicesStats).map((key, index) => (\n                  <tr key={key}>\n                    <td>{key}</td>\n                    <td>{servicesStats[key].count}</td>\n                    <td>\n                      <TextFormat value={servicesStats[key].mean} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].min} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].p50} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].p75} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].p95} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].p99} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat value={servicesStats[key].max} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Row>\n        ) : (\n          ''\n        )}\n\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.loading,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MetricsPage);\n"]}]}